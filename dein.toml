[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
if = "has('nvim')"
on_i = 1
# deoplete hook_add{{{
hook_add = '''
let g:deoplete#enable_at_startup = 1

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function() abort
  return deoplete#close_popup() . "\<CR>"
endfunction
" <TAB>: completion.
imap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#mappings#manual_complete()
function! s:check_back_space() abort "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> deoplete#mappings#smart_close_popup()."\<C-h>"
inoremap <expr><BS> deoplete#mappings#smart_close_popup()."\<C-h>"

inoremap <expr><C-g> deoplete#mappings#undo_completion()
" <C-l>: redraw candidates
" inoremap <expr><C-l>       deoplete#mappings#refresh()

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function() abort
  return deoplete#mappings#close_popup() . "\<CR>"
endfunction

inoremap <expr> '  pumvisible() ? deoplete#mappings#close_popup() : "'"

" call deoplete#custom#set('_', 'matchers', ['matcher_head'])
call deoplete#custom#source('ghc', 'sorters', ['sorter_word'])
" call deoplete#custom#set('buffer', 'mark', '')
" call deoplete#custom#set('_', 'matchers', ['matcher_full_fuzzy'])
" call deoplete#custom#set('_', 'disabled_syntaxes', ['Comment', 'String'])
" call deoplete#custom#set('buffer', 'mark', '*')

" Use auto delimiter
" call deoplete#custom#set('_', 'converters',
"       \ ['converter_auto_paren',
"       \  'converter_auto_delimiter', 'remove_overlap'])
call deoplete#custom#source('_', 'converters', [
      \ 'converter_remove_paren',
      \ 'converter_remove_overlap',
      \ 'converter_truncate_abbr',
      \ 'converter_truncate_menu',
      \ 'converter_auto_delimiter',
      \ ])

" call deoplete#custom#set('buffer', 'min_pattern_length', 9999)

let g:deoplete#keyword_patterns = {}
let g:deoplete#keyword_patterns._ = '[a-zA-Z_]\k*\(?'
" let g:deoplete#keyword_patterns.tex = '\\?[a-zA-Z_]\w*'
let g:deoplete#keyword_patterns.tex = '[^\w|\s][a-zA-Z_]\w*'

let g:deoplete#omni#input_patterns = {}
let g:deoplete#omni#input_patterns.python = ''
let g:deoplete#omni#functions = {}
let g:deoplete#omni#functions.lua = 'xolox#lua#omnifunc'

" inoremap <silent><expr> <C-t> deoplete#mappings#manual_complete('file')

" let g:deoplete#enable_refresh_always = 1
let g:deoplete#enable_camel_case = 1
" let g:deoplete#auto_complete_start_length = 3



let g:deoplete#ignore_sources = {'_': ['tag']}

let g:deoplete#omni#functions = {}
let g:deoplete#omni#sources = {}
let g:deoplete#omni#sources._ = ['file', 'neosnippet']
let g:deoplete#omni#input_patterns = {}

let g:deoplete#omni#functions.elm = ['elm#Complete']
let g:deoplete#omni#input_patterns.elm = '[^ \t]+'
'''
# }}}

[[plugins]]
repo = 'Shougo/vimfiler.vim'
hook_add = """
autocmd FileType vimfiler nmap <buffer> <C-l> <C-w>l
nnoremap <Leader>e :VimFilerExplorer  -split -no-quit -auto-cd<CR>
" ^^ to go up
nmap <buffer> ^^ <Plug>(vimfiler_switch_to_parent_directory)
" use R to refresh
nmap <buffer> R <Plug>(vimfiler_redraw_screen)
" overwrite C-l
nmap <buffer> <C-l> <C-w>l
" close vimfiler automatically when there are only vimfiler open
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_enable_auto_cd = 1


" diffコマンド{{{
let diff_action = {
      \   'description' : 'diff',
      \   'is_selectable' : 1,
      \ }

function! diff_action.func(candidates)
  echom  "hoge:" . a:candidates[0].action__path
  if len(a:candidates) == 1
    " カレントバッファとdiffを取る
    execute 'vert diffsplit '  fnameescape(a:candidates[0].action__path)
  elseif len(a:candidates) == 2
    " 選択されたファイルとdiffを取る
    execute 'tabnew ' fnameescape(a:candidates[0].action__path)
    execute 'vert diffsplit' fnameescape(a:candidates[1].action__path)
  else
    " 3-way以上は非対応
    echo 'too manycandidates!'
  endif
endfunction

call unite#custom#action('file', 'diff', diff_action)
unlet diff_action
" }}}


" 不可視パターン
let g:vimfiler_ignore_pattern = '\(^\.\|\~$\|\.git$\|\.hi$\|\.pyc$\|\.[oad]$\)'
"""
# depends = 'Shougo/unite.vim'
# on_map = [['n', '<Plug>']]
# on_if =  'isdirectory(bufname("%"))'

# vimshell{{{
[[plugins]]
repo = 'Shougo/vimshell.vim'
hook_add = """
  nmap <Leader>v :sp<cr><c-w><c-w>:VimShell<cr>
  nmap <Leader>V :vs<cr><c-l><c-l>:VimShell<cr>
  let g:vimshell_no_default_keymappings = 1
 
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
let g:vimshell_prompt = '% '
let g:vimshell_split_command = ''
let g:vimshell_enable_transient_user_prompt = 1
let g:vimshell_force_overwrite_statusline = 1


" nvimだと動かない
"  let g:vimshell_prompt_expr = 'escape(fnamemodify(getcwd(), ":~").">", "\\[]()?! ")." "'
"  let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+> '

  au! FileType vimshell call s:set_vimshell() 

  function! s:set_vimshell()
    " overwrite C-l
    nmap <buffer> <CR> <Plug>(vimshell_enter)
    nmap <buffer> q <Plug>(vimshell_hide)
    nmap <buffer> Q <Plug>(vimshell_exit)
    nmap <buffer> <C-p> <Plug>(vimshell_previous_prompt)
    nmap <buffer> <C-n> <Plug>(vimshell_next_prompt)
    nmap <buffer> <C-S-k> <Plug>(vimshell_delete_previous_output)
    nmap <buffer> <C-k> <C-w>k
    nmap <buffer> <C-y> <Plug>(vimshell_paste_prompt)
    nmap <buffer> E <Plug>(vimshell_move_end_argument)
    nmap <buffer> cc <Plug>(vimshell_change_line)
    nmap <buffer> dd <Plug>(vimshell_delete_line)
    nmap <buffer> I <Plug>(vimshell_insert_head)
    nmap <buffer> A <Plug>(vimshell_append_end)
    nmap <buffer> i <Plug>(limshell_insert_enter)
    nmap <buffer> a <Plug>(vimshell_append_enter)
    nmap <buffer> ^ <Plug>(vimshell_move_head)
    nmap <buffer> <C-c> <Plug>(vimshell_interrupt) 
    "nmap <buffer> <C-l> <Plug>(vimshell_clear)
    nmap  <buffer> <C-z> <Plug>(vimshell_execute_by_background)
    imap  <buffer> <CR> <Plug>(vimshell_enter)
    imap <expr><buffer><C-l> pumvisible() ? "\<C-n>" : "\<Plug>(vimshell_history_unite)"
    imap <buffer> <TAB> <Plug>(vimshell_command_complete)
    imap <buffer> <C-a> <Plug>(vimshell_move_head)
    imap <buffer> <C-u> <Plug>(vimshell_delete_backward_line)
    imap <buffer> <C-w> <Plug>(vimshell_delete_backward_word)
    imap <buffer> <C-t> <Plug>(vimshell_insert_last_word)
    imap <buffer> <C-x><C-h> <Plug>(vimshell_run_help)
    imap <buffer> <C-c> <Plug>(vimshell_interrupt)

    imap <buffer><BS>  <Plug>(vimshell_another_delete_backward_char)
    imap <buffer><C-h> <Plug>(vimshell_another_delete_backward_char)

    "imap <buffer> <C-h> <Plug>(vimshell_delete_backward_char)
    "imap <buffer> <BS> <Plug>(vimshell_delete_backward_char)
    imap <buffer> <C-k> <Plug>(vimshell_delete_forward_line)
    imap <buffer> <C-x> <Plug>(vimshell_move_previous_window)
  endfunction!
"""
#}}}

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
# Unite{{{
hook_add = '''
nnoremap [unite] <Nop>
nmap U [unite]
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
nnoremap <silent> [unite]r :<C-u>Unite register<CR>
nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
nnoremap <silent> [unite]c :<C-u>Unite bookmark<CR>
nnoremap <silent> [unite]o :<C-u>Unite outline<CR>
nnoremap <silent> [unite]t :<C-u>Unite tab<CR>
nnoremap <silent> [unite]w :<C-u>Unite window<CR>
nnoremap <silent> [unite]d :UniteBookmarkAdd<CR>


" start unite in insert mode
let g:unite_enable_start_insert = 1

" use vimfiler to open directory
call unite#custom_default_action("source/bookmark/directory", "vimfiler")
call unite#custom_default_action("directory", "vimfiler")
call unite#custom_default_action("directory_mru", "vimfiler")
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  imap <buffer> <Esc><Esc> <Plug>(unite_exit)
  nmap <buffer> <Esc> <Plug>(unite_exit)
  nmap <buffer> <C-n> <Plug>(unite_select_next_line)
  nmap <buffer> <C-p> <Plug>(unite_select_previous_line)
endfunction
'''
# }}}

[[plugins]]
repo = 'thinca/vim-singleton'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/neossh.vim'

# 括られてるtextを編集
[[plugins]]
repo = 'tpope/vim-surround'

#テキスト整形Align…の新しいやつ
[[plugins]]
repo = 'junegunn/vim-easy-align'


# セッション復元
[[plugins]]
repo = 'xolox/vim-session'
depends = ['xolox/vim-misc']
hook_add = '''
let s:local_session_directory = getcwd() .'/'. '.vimsessions'
"  存在すれば
if isdirectory(s:local_session_directory)
  " session保存ディレクトリをそのディレクトリの設定
  let g:session_directory = s:local_session_directory
  " vimを辞める時に自動保存
  let g:session_autosave = 'yes'
  " 引数なしでvimを起動した時にsession保存ディレクトリのdefault.vimを開く
  let g:session_autoload = 'yes'
  " 1分間に1回自動保存
  let g:session_autosave_periodic = 1
else
  let g:session_autosave = 'no'
  let g:session_autoload = 'no'
endif
'''

[[plugins]]
repo = 'xolox/vim-misc'

# タブ移動
[[plugins]]
repo = 'kana/vim-tabpagecd'

# grepヘルパー
[[plugins]]
repo = 'fuenor/qfixgrep'

# ssh接続
[[plugins]]
repo = 'ujihisa/vimshell-ssh'

# git log確認
[[plugins]]
repo = 'cohama/agit.vim'

# gitクライアント全般
[[plugins]]
repo = 'tpope/vim-fugitive'

# git rebase -i時のdiff
[[plugins]]
repo = 'hotwatermorning/auto-git-diff'

# tagsからアウトライン表示
[[plugins]]
repo = 'majutsushi/tagbar'

# windowリサイズ
[[plugins]]
repo = 'simeji/winresizer'
hook_add = """
let g:winresizer_start_key='<Leader><C-E>'
"""

# neosnippetと連携
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# コンテクストごとにftを自動切り替えする
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'Shougo/context_filetype.vim' 

# コンテクストごとにftを判別する
[[plugins]]
repo = 'Shougo/context_filetype.vim'

# タブごとに:cdが機能
[[plugins]]
repo = 'kana/vim-tabpagecd'

# grepヘルパー
[[plugins]]
repo = 'fuenor/qfixgrep'
hook_add= '''
"デフォルトで使用する外部grep
set grepprg=grep

"grepに含めたくない拡張子
let MyGrep_ExcludeReg = '[~#]$\|\.dll$\|\.exe$\|\.lnk$\|\.o$\|\.obj$\|\.pdf$\|\.xls$'

"大文字、小文字を気にせずに検索する。
let g:MyGrepDefault_Ignorecase = 1
'''

# インデント可視化
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=235
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=234
let g:indent_guides_color_change_percent = 30
let g:indent_guides_guide_size = 1
'''

[[plugins]]
repo = 'vim-scripts/HybridText'
hook_add='''
" autocmd BufEnter * if &filetype == "" | setlocal ft=hybrid | endif
'''

# python for deoplete
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

# go for deoplete
[[plugins]]
repo = 'zchee/deoplete-go'
on_i = 1
on_ft = 'go'

[[plugins]]
repo = 'koron/codic-vim'

[[plugins]]
repo = 'rhysd/unite-codic.vim'

# シンタックスチェック
# TODO 各種言語プラグインに適用させる
[[plugins]]
repo = 'neomake/neomake'
hook_add = '''
  autocmd! BufReadPost,BufWritePost * Neomake
'''


# カラースキーマ定義{{{
# solarized カラースキーム
[[plugins]]
repo =  'altercation/vim-colors-solarized'
hook_add="""
let g:solarized_contrast="hight"
let g:solarized_italic=0
let g:solarized_termcolors=256
let g:solarized_termtrans=1
"""

# mustang カラースキーム
[[plugins]]
repo =  'croaker/mustang-vim'
# wombat カラースキーム
[[plugins]]
repo =  'jeffreyiacono/vim-colors-wombat'
# jellybeans カラースキーム
[[plugins]]
repo =  'nanotech/jellybeans.vim'
# lucius カラースキーム
[[plugins]]
repo =  'vim-scripts/Lucius'
# zenburn カラースキーム
[[plugins]]
repo =  'vim-scripts/Zenburn'
# mrkn256 カラースキーム
[[plugins]]
repo =  'mrkn/mrkn256.vim'
# railscasts カラースキーム
[[plugins]]
repo =  'jpo/vim-railscasts-theme'
# pyte カラースキーム
[[plugins]]
repo =  'therubymug/vim-pyte'
# molokai カラースキーム
[[plugins]]
repo =  'tomasr/molokai'

# カラースキーム一覧表示に Unite.vim を使う
[[plugins]]
repo = 'ujihisa/unite-colorscheme'

# }}}


